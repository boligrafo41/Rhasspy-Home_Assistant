"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Comms_clientEvents, _Comms_homeAssistant, _Comms_serverId;
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const globals_1 = require("../../globals");
const homeAssistant_1 = require("../../homeAssistant");
const Websocket_1 = require("../../homeAssistant/Websocket");
class Comms {
    constructor(serverId, homeAssistant, clientEvents) {
        _Comms_clientEvents.set(this, void 0);
        _Comms_homeAssistant.set(this, void 0);
        _Comms_serverId.set(this, void 0);
        __classPrivateFieldSet(this, _Comms_clientEvents, clientEvents, "f");
        __classPrivateFieldSet(this, _Comms_homeAssistant, homeAssistant, "f");
        __classPrivateFieldSet(this, _Comms_serverId, serverId, "f");
        this.startListeners();
    }
    startListeners() {
        __classPrivateFieldGet(this, _Comms_clientEvents, "f").addListeners(this, [
            ['ha_events:state_changed', this.onStateChanged],
            [Websocket_1.ClientEvent.Integration, this.onIntegrationEvent],
            [Websocket_1.ClientEvent.StatesLoaded, this.onStatesLoaded],
            [homeAssistant_1.HaEvent.AreaRegistryUpdated, this.onAreaRegistryUpdate],
            [homeAssistant_1.HaEvent.DeviceRegistryUpdated, this.onDeviceRegistryUpdate],
            [homeAssistant_1.HaEvent.FloorRegistryUpdated, this.onFloorRegistryUpdate],
            [homeAssistant_1.HaEvent.LabelRegistryUpdated, this.onLabelRegistryUpdate],
            [homeAssistant_1.HaEvent.EntityRegistryUpdated, this.onEntityRegistryUpdate],
            [homeAssistant_1.HaEvent.ServicesUpdated, this.onServicesUpdated],
        ]);
    }
    publish(type, data, retain = true) {
        globals_1.RED.comms.publish(`homeassistant/${type}/${__classPrivateFieldGet(this, _Comms_serverId, "f")}`, data, retain);
    }
    onAreaRegistryUpdate(areas) {
        const throttledPublish = (0, lodash_1.throttle)(() => {
            this.publish('areas', areas);
        }, 1000);
        throttledPublish();
    }
    onDeviceRegistryUpdate(devices) {
        const throttledPublish = (0, lodash_1.throttle)(() => {
            this.publish('devices', devices);
        }, 1000);
        throttledPublish();
    }
    onFloorRegistryUpdate(floors) {
        const throttledPublish = (0, lodash_1.throttle)(() => {
            this.publish('floors', floors);
        }, 1000);
        throttledPublish();
    }
    onLabelRegistryUpdate(labels) {
        const throttledPublish = (0, lodash_1.throttle)(() => {
            this.publish('labels', labels);
        }, 1000);
        throttledPublish();
    }
    onEntityRegistryUpdate(entities) {
        const throttledPublish = (0, lodash_1.throttle)(() => {
            this.publish('entityRegistry', entities);
        }, 1000);
        throttledPublish();
    }
    onIntegrationEvent(eventType) {
        this.publish('integration', {
            event: eventType,
            version: __classPrivateFieldGet(this, _Comms_homeAssistant, "f").integrationVersion,
        });
    }
    onServicesUpdated(services) {
        const throttledPublish = (0, lodash_1.throttle)(() => {
            this.publish('services', services);
        }, 1000);
        throttledPublish();
    }
    onStateChanged(event) {
        const entity = event.event.new_state;
        if (entity) {
            this.publish('entity', entity);
        }
    }
    onStatesLoaded(entities) {
        const throttledPublish = (0, lodash_1.throttle)(() => {
            this.publish('entities', entities);
        }, 1000);
        throttledPublish();
    }
}
_Comms_clientEvents = new WeakMap(), _Comms_homeAssistant = new WeakMap(), _Comms_serverId = new WeakMap();
exports.default = Comms;
